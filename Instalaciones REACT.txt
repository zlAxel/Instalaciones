
    - Ingresar a la ruta 

        > cd ../..
        > cd '.\Sistemas\Sistemas React\'
        > cd '.\boutique-client\'
        
        > cd '.\dulces-wichos-client\'


    - Creación del proyecto [VITE]
    
        > npm init vite@latest
        > npm init vite@latest miduchollos -- --template react

        > npm install
        > npm run dev

    - Creación del proyecto [NEXT]

        > npx create-next-app@latest nombre-proyecto

        > npm install
        > npm run dev
    
    - Instalación de linter ( Standard )

        > npm install standard -D

        * Es una instalación que ayuda a mantener un código limpio y ordenado

    
    - Instalación de tailwind y postcss

        > npm install -D tailwindcss postcss autoprefixer
        > npx tailwindcss init -p

        - Sustituir el index.css por el siguiente:

            - @tailwind base;
            - @tailwind components;
            - @tailwind utilities;

        - Sustituir "content" en tailwind.config.js

            content: [
                './index.html',
                './src/**/*.{js,ts,jsx,tsx}', 
                './src/assets/css/main.css', // * Observa los componentes CSS de Tailwind
              ],

            ( Reiniciar el proyecto para que se apliquen los cambios )

        
    - Instalación de Tailwind Components

        > npm install @headlessui/react @heroicons/react
        > npm install -D @tailwindcss/forms
        > npm install -D @tailwindcss/aspect-ratio


    - Instalación de Tailwind Animated

            > npm i tailwindcss-animated


    - Instalación de react router dom

        > npm install react-router-dom
        > npm install react-router-dom -E # * El parametro -E es para que no se actualice la versión


    - Instalación de axios

        > npm install axios

    
    - Instalación de SWR

        > npm install swr

    - Instalación de Zustand

        > npm install zustand


    - Instalación de Emotion (STYLED COMPONENTS):

        > npm install @emotion/react @emotion/styled


    - Ejecución del proyecto

        > npm run dev

        - Ejecución del servidor Api JSON

            > json-server --watch db.json

            - Instalación de json-server

                > npm install -g json-server


    - Limpiar cache

        > npm cache clean --force
        > npm i && npm run dev

    - Snippets

        > rfce | Crea una función
        > rafc | Crea un arrow function

    - Creación de Swipable Lists

        > npm i react-swipeable-list
        > npm i prop-types

    - Instalación de graficas

        > npm i react-circular-progressbar
        > npm install react-move
        > npm install d3-ease

    - Instalación de React Modal

        > npm install react-modal

    - Instalación de React Toastify

        > npm install react-toastify

        https://fkhadra.github.io/react-toastify/introduction/

        
    - Instalación de Crypto JS

        > npm install crypto-js

        https://www.npmjs.com/package/crypto-js


    - Instalación de Auto Animate

        > npm install @formkit/auto-animate

        https://auto-animate.formkit.com/#installation


    - Construcción para producción:

        - Con build:

            > npm run build

        - Con GitHub:

            - zlAxel
            - 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

            > git init
            > git add .

            > git commit -m "first commit"
            > git branch -M main
            > git remote add origin https://github.com/zlAxel/citas_react.git
            > git push -u origin main

            - Agregar branches

            > git checkout -b nuevo-header main # Se crea nuevo branch para identificar el cambio
            > git add . # Se agregan todos los archivos modificados
            > git commit -m "No fue mucho trabajo, pero fue trabajo honesto" # Se envía y se agrega el comentario
            > git checkout main # Se regresa al branch original

            - Aplicar cambios del branch creado y se elimina una vez unidos

            > git merge nuevo-header # Se une el branch MAIN con nuestro branch
            > git branch -d nuevo-header # Se elimina el branch creado

            > git push -u origin main # Se aplican los cambios al MAIN

            - Cursito

            > https://www.atlassian.com/es/git/tutorials/syncing





    - Instalació de lord-icons

        > https://www.npmjs.com/package/lord-icon-element
        > https://lordicon.com/docs/web


    - Instalación de Sonner

        > https://sonner.emilkowal.ski/


    - ================================================================
    - Retos de React (React Router DOM)

        > ( Lista de Tareas ) https://www.youtube.com/watch?v=3q5FwUxOoMQ

            Por supuesto, entiendo lo que necesitas. Aquí tienes un esquema de lo que podría incluir un proyecto 
            completo de ToDo List utilizando React, JavaScript, JSON Server y React Router DOM:

            - 1. Lista de Tareas:
                Mostrar una lista de tareas con título y estado (completado o pendiente).
                Mostrar un botón para marcar una tarea como completada o pendiente.
                Mostrar un botón para eliminar una tarea.
                Usar React Router DOM para la navegación entre la lista y el formulario de agregar tareas.

            - 2. Formulario para Agregar Tareas:
                Mostrar un formulario con un campo de texto para ingresar el título de la tarea.
                Validar que el campo no esté vacío antes de permitir agregar la tarea.
                Enviar la tarea al servidor JSON cuando se agrega.

            - 3. Funcionalidades de JSON Server:
                Crear una API simulada usando JSON Server para almacenar las tareas.
                Implementar rutas para obtener, crear, actualizar y eliminar tareas.

            - 4. React Router DOM:
                Configurar rutas usando React Router DOM para mostrar la lista de tareas y el formulario por separado.
                Usar Link para navegar entre las diferentes páginas.

            - 5. Estilos:
                Estilizar la aplicación utilizando CSS o bibliotecas como Tailwind CSS.
                Aplicar estilos a la lista de tareas, el formulario y los botones.

            - 6. Otras Funcionalidades:
                Agregar una barra de búsqueda para filtrar las tareas por título.
                Implementar una opción para marcar todas las tareas como completadas.
                Mostrar estadísticas, como el número total de tareas y el número de tareas completadas.
                Agregar una opción para borrar todas las tareas completadas.
                Recuerda que este es solo un esquema general y puedes personalizarlo según tus preferencias y necesidades. El proyecto puede expandirse aún más agregando funcionalidades como autenticación, edición de tareas, prioridades, etiquetas, etc. ¡Espero que este esquema te ayude a desarrollar un proyecto completo y enriquecedor!
        
        
        
        
        